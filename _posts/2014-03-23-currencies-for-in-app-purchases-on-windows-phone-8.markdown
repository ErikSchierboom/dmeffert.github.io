---
layout: post
title:  "Currency symbols for all supported cultures on Windows Phone"
date:   2014-03-23 0:00:00
categories: wp8
active: blog
---

In-app purchases offer a great way to monetize your app, and adding them to your Windows Phone app is pretty straightforward.  Usually you want to show your users a list of products that can be purchased, including the price of these  products.  In a XAML based app this is not very hard &mdash; the in-app purchases API gives you a nice `FormattedString` property that shows the price in the currency local to the user, so you can simply show this formatted price string in your `<TextBlock>` (or whatever) and be done with it.

Unfortunately, for DirectX based games this is not as easy. Since Direct2D and DirectWrite are not supported on Windows Phone 8 you cannot simply output a string in your favorite font. A common way to write text for games it to use a prerendered font bitmap. For a Windows Phone 8 DirectX app you could use the `SpriteFont` in [DirectXTK](https://directxtk.codeplex.com/), or you can roll your own solution. I rolled my own, and I used the excellent [Font Builder](https://github.com/andryblack/fontbuilder) tool to generate the font bitmap. Either way, before you can build the font bitmap, you will need to know what characters you are going to use, because including the entire Unicode set is usually not such a great idea.

This means that if we decide to display price strings for our in-app products, we will need to know which currency symbols our app can expect. Maybe I didn't search hard enough, but I could only find a list of cultures you can expect, sadly without the currency symbols. Fortunately, we can get everything we need from the .NET framework. I've written a little program that returns the list of characters used in currency symbols for all cultures. Simply feed this list to your font bitmap building tool and you should be good to go. Remember to use a font that actually supports all these glyphs.

`¤RETBر.س‏دإبجمعاكلقتي$₹manманһrлв৳¥€KMКМč£kFCHރZJ₱USs₡D`
`QL/₲AfG₦₪t֏pლ₸៛₩со₭де₮रुߖߕzł؋leiрWරුdиhܠܣ฿NብርP₺ⴷⵔ₴o'ў₫ⵎO`

This list was generated by the following code:

{% highlight c# %}
using System;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
namespace CurrencySymbols
{
    class Program
    {
        static void Main(string[] args)
        {
            Debug.WriteLine(new String(
                CultureInfo.GetCultures(CultureTypes.AllCultures)
                .Aggregate(string.Empty, (acc, culture) => { 
                        return acc + culture.NumberFormat.CurrencySymbol; 
                    }, x => x)
                .ToCharArray()
                .Distinct()
                .ToArray()
            ));
        }
    }
}
{% endhighlight %}